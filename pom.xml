<?xml version="1.0" encoding="UTF-8"?>
<project xmlns="http://maven.apache.org/POM/4.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
		 xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 https://maven.apache.org/xsd/maven-4.0.0.xsd">
	<modelVersion>4.0.0</modelVersion>
	<parent>
		<groupId>org.springframework.boot</groupId>
		<artifactId>spring-boot-starter-parent</artifactId>
		<version>2.7.12</version>
		<relativePath/> <!-- lookup parent from repository -->
	</parent>
	<groupId>io.github.2lbj</groupId>
	<artifactId>lergo-spring-boot-starter</artifactId>
	<version>1.0.8</version>
	<packaging>jar</packaging>
	<name>LergoCore</name>
	<description>LerGo Framework for Spring Boot</description>
	<properties>
		<application.artifactId>${artifactId}</application.artifactId>
		<application.version>${version}</application.version>
		<java.version>17</java.version>
		<projectUrl>https://github.com/2lbj/lergo-spring-boot-starter.git</projectUrl>
		<serverId>Sonatype_OSSRH</serverId><!-- 服务id 也就是setting.xml中的servers.server.id -->
	</properties>

	<dependencies>

		<dependency>
			<groupId>org.springframework.boot</groupId>
			<artifactId>spring-boot-starter-webflux</artifactId>
		</dependency>
		<dependency>
			<groupId>org.springframework.boot</groupId>
			<artifactId>spring-boot-starter-validation</artifactId>
		</dependency>
		<dependency>
			<groupId>org.springframework.boot</groupId>
			<artifactId>spring-boot-configuration-processor</artifactId>
			<!--<optional>true</optional>-->
		</dependency>
		<dependency>
			<groupId>org.springframework.boot</groupId>
			<artifactId>spring-boot-starter-actuator</artifactId>
		</dependency>
		<dependency>
			<groupId>org.springframework.boot</groupId>
			<artifactId>spring-boot-starter-aop</artifactId>
		</dependency>

		<dependency>
			<groupId>org.springframework.boot</groupId>
			<artifactId>spring-boot-devtools</artifactId>
			<scope>runtime</scope>
			<optional>true</optional>
		</dependency>
		<dependency>
			<groupId>org.springframework.boot</groupId>
			<artifactId>spring-boot-starter-test</artifactId>
			<scope>test</scope>
		</dependency>

		<dependency>
			<groupId>io.projectreactor</groupId>
			<artifactId>reactor-test</artifactId>
			<scope>test</scope>
		</dependency>
		<dependency>
			<groupId>org.projectlombok</groupId>
			<artifactId>lombok</artifactId>
		</dependency>

		<dependency>
			<groupId>io.springfox</groupId>
			<artifactId>springfox-boot-starter</artifactId>
			<version>3.0.0</version>
		</dependency>


		<dependency>
			<groupId>org.postgresql</groupId>
			<artifactId>postgresql</artifactId>
			<version>42.6.0</version>
			<scope>runtime</scope>
		</dependency>

		<dependency>
			<groupId>io.github.openfeign</groupId>
			<artifactId>feign-core</artifactId>
			<version>12.3</version>
		</dependency>
		<dependency>
			<groupId>io.github.openfeign</groupId>
			<artifactId>feign-okhttp</artifactId>
			<version>12.3</version>
		</dependency>
		<dependency>
			<groupId>io.github.openfeign</groupId>
			<artifactId>feign-slf4j</artifactId>
			<version>12.3</version>
		</dependency>
		<dependency>
			<groupId>io.github.openfeign</groupId>
			<artifactId>feign-gson</artifactId>
			<version>12.3</version>
		</dependency>

		<dependency>
			<groupId>cn.hutool</groupId>
			<artifactId>hutool-all</artifactId>
			<version>5.8.20</version>
		</dependency>
		<dependency>
			<groupId>com.google.guava</groupId>
			<artifactId>guava</artifactId>
			<version>32.0.1-jre</version>
		</dependency>

	</dependencies>

	<!--填入开发者信息，姓名、邮箱、项目地址-->
	<developers>
		<developer>
			<name>hexLi</name>
			<email>nerv.2lbj@gmail.com</email>
			<url>${projectUrl}</url>
		</developer>
	</developers>
	<!--以下部分内容不需要修改，直接复制咱贴即可-->
	<url>${projectUrl}</url>
	<licenses>
		<license>
			<name>GNU Lesser General Public License v3.0</name>
			<url>https://www.gnu.org/licenses/lgpl-3.0.txt</url>
			<distribution>repo,manual</distribution>
		</license>
	</licenses>
	<scm>
		<!-- 采用projectUrl变量代替这个值，方便给重复利用这个配置，也就是上面的标签替换一下值就行 -->
		<connection>${projectUrl}</connection>
		<developerConnection>${projectUrl}</developerConnection>
		<url>${projectUrl}</url>
	</scm>
	<distributionManagement>
		<snapshotRepository>
			<!--这个id和settings.xml中servers.server.id要相同，因为上传jar需要登录才有权限-->
			<id>${serverId}</id>
			<name>OSS Snapshots Repository</name>
			<url>https://oss.sonatype.org/content/repositories/snapshots/</url>
		</snapshotRepository>
		<repository>
			<!--这个id和settings.xml中servers.server.id要相同，因为上传jar需要登录才有权限-->
			<id>${serverId}</id>
			<name>OSS Staging Repository</name>
			<url>https://oss.sonatype.org/service/local/staging/deploy/maven2/</url>
		</repository>
	</distributionManagement>

	<build>
		<!--指定filtering=true.maven的占位符解析表达式就可以用于它里面的文件-->
		<resources>
			<resource>
				<directory>src/main/resources</directory>
				<filtering>true</filtering>
			</resource>
		</resources>

		<plugins>

			<!-- 编译插件，设置源码以及编译的jdk版本 -->
			<plugin>
				<groupId>org.apache.maven.plugins</groupId>
				<artifactId>maven-compiler-plugin</artifactId>
				<configuration>
					<source>${java.version}</source>
					<target>${java.version}</target>
				</configuration>
			</plugin>
			<!--打包源码的插件-->
			<plugin>
				<groupId>org.apache.maven.plugins</groupId>
				<artifactId>maven-source-plugin</artifactId>
				<version>2.2.1</version>
				<executions>
					<execution>
						<id>attach-sources</id>
						<goals>
							<goal>jar-no-fork</goal>
						</goals>
					</execution>
				</executions>
			</plugin>
			<!-- Javadoc 文档生成插件-->
			<plugin>
				<groupId>org.apache.maven.plugins</groupId>
				<artifactId>maven-javadoc-plugin</artifactId>
				<version>2.9.1</version>
				<configuration>
					<!-- 忽略生成文档中的错误 -->
					<additionalparam>-Xdoclint:none</additionalparam>
					<aggregate>true</aggregate>
					<charset>UTF-8</charset><!-- utf-8读取文件 -->
					<encoding>UTF-8</encoding><!-- utf-8进行编码代码 -->
					<docencoding>UTF-8</docencoding><!-- utf-8进行编码文档 -->
				</configuration>
				<executions>
					<execution>
						<id>attach-javadocs</id>
						<goals>
							<goal>jar</goal>
						</goals>
					</execution>
				</executions>
			</plugin>
			<!--支持yaml读取pom的参数-->
			<plugin>
				<groupId>org.apache.maven.plugins</groupId>
				<artifactId>maven-resources-plugin</artifactId>
				<version>3.2.0</version>
				<configuration>
					<encoding>UTF-8</encoding>
					<delimiters>
						<delimiter>@</delimiter>
					</delimiters>
					<useDefaultDelimiters>false</useDefaultDelimiters>
				</configuration>
			</plugin>
			<!--公钥私钥插件，也就是上传需要进行验证用户名和密码过程中需要用到的插件-->
			<plugin>
				<groupId>org.apache.maven.plugins</groupId>
				<artifactId>maven-gpg-plugin</artifactId>
				<version>1.5</version>
				<executions>
					<execution>
						<id>sign-artifacts</id>
						<phase>verify</phase>
						<goals>
							<goal>sign</goal>
						</goals>
					</execution>
				</executions>
			</plugin>
			<!--部署插件-->
			<plugin>
				<groupId>org.sonatype.plugins</groupId>
				<artifactId>nexus-staging-maven-plugin</artifactId>
				<version>1.6.7</version>
				<extensions>true</extensions>
				<configuration>
					<serverId>${serverId}</serverId>
					<nexusUrl>https://s01.oss.sonatype.org/</nexusUrl>
					<autoReleaseAfterClose>true</autoReleaseAfterClose>
				</configuration>
			</plugin>

			<!--启动JAR-->
			<!--<plugin>
				<groupId>org.springframework.boot</groupId>
				<artifactId>spring-boot-maven-plugin</artifactId>
			</plugin>-->

			<!--依赖JAR-->
			<!--<plugin>
				<groupId>org.apache.maven.plugins</groupId>
				<artifactId>maven-compiler-plugin</artifactId>
				<version>3.10.1</version>
			</plugin>-->
			<plugin>
				<groupId>org.apache.maven.plugins</groupId>
				<artifactId>maven-jar-plugin</artifactId>
				<version>3.2.2</version>
				<configuration>
					<excludes>
						<exclude>application.yml</exclude>
						<exclude>config/*.yml</exclude>
					</excludes>
				</configuration>
			</plugin>

			<plugin>
				<groupId>pl.project13.maven</groupId>
				<artifactId>git-commit-id-plugin</artifactId>
				<version>4.0.0</version>
				<executions>
					<execution>
						<id>get-the-git-infos</id>
						<goals>
							<goal>revision</goal>
						</goals>
					</execution>
				</executions>
				<configuration>
					<!-- 使properties扩展到整个maven bulid 周期
                    Ref: https://github.com/ktoso/maven-git-commit-id-plugin/issues/280 -->
					<injectAllReactorProjects>true</injectAllReactorProjects>
					<dateFormat>yyyy-MM-dd HH:mm:ss</dateFormat>
					<verbose>true</verbose>
					<!-- 是否生 git.properties 属性文件 -->
					<generateGitPropertiesFile>true</generateGitPropertiesFile>
					<!--git描述配置,可选;由JGit提供实现;-->
					<gitDescribe>
						<!--是否生成描述属性-->
						<skip>false</skip>
						<!--提交操作未发现tag时,仅打印提交操作ID,-->
						<always>false</always>
						<!--提交操作ID显式字符长度,最大值为:40;默认值:7; 0代表特殊意义;后面有解释; -->
						<abbrev>7</abbrev>
						<!--构建触发时,代码有修改时(即"dirty state"),添加指定后缀;默认值:"";-->
						<dirty>-dirty</dirty>
						<!--使用标签起点-->
						<tags>true</tags>
						<!--always print using the "tag-commits_from_tag-g_commit_id-maybe_dirty" format, even if "on" a tag. The distance will always be 0 if you're "on" the tag. -->
						<forceLongFormat>false</forceLongFormat>
					</gitDescribe>
					<includeOnlyProperties>
						<includeOnlyProperty>^git.branch$</includeOnlyProperty>
						<includeOnlyProperty>^git.commit.id.describe$</includeOnlyProperty>
						<includeOnlyProperty>^git.commit.time$</includeOnlyProperty>
						<includeOnlyProperty>^git.commit.message.short$</includeOnlyProperty>
						<includeOnlyProperty>^git.commit.user.email$</includeOnlyProperty>
						<includeOnlyProperty>^git.commit.user.name$</includeOnlyProperty>
						<includeOnlyProperty>^git.total.commit.count$</includeOnlyProperty>
					</includeOnlyProperties>
				</configuration>
			</plugin>
		</plugins>
	</build>

	<repositories>
		<repository>
			<id>alimaven</id>
			<name>aliyun maven</name>
			<url>https://maven.aliyun.com/repository/public</url>
			<releases>
				<enabled>true</enabled>
			</releases>
			<snapshots>
				<enabled>false</enabled>
			</snapshots>
		</repository>
	</repositories>

</project>
